#!/usr/bin/env node
"use strict";function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_unsupportedIterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return _arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return"Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(c):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?_arrayLikeToArray(a,b):void 0}}function _iterableToArray(a){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a))return _arrayLikeToArray(a)}function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}var fetch=require("node-fetch"),chalk=require("chalk"),isDirOrFile=require("./index"),files=[{file:"prueba/README.md",href:"https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1juanito",text:"Linea de comando CLI"},{file:"prueba/README.md",href:"https://javascript.info/promise-basics",text:"Comprendiendo Promesas en Js"},{file:"prueba/README.md",href:"https://medium.com/netscape/a-guide-to-create-a-nodejs-command-line-package-c2166ad0452ejunaito",text:"Linea de comando CLI"}],validateOption=function(a){return Promise.all(a.map(function(a){return new Promise(function(b,c){fetch(a.href).then(function(c){// ok, fail
// #
a.validate="OK"===c.statusText?"OK":"FAIL",a.code=c.status,b(a)})["catch"](function(a){c(a)})})}))},linksToValidate=function(a){return new Promise(function(b,c){isDirOrFile(a).then(function(a){// console.log(chalk.yellow('Ingreso Opción Validate.'));
validateOption(a).then(function(a){b(a)})["catch"](function(a){c(a)})})["catch"](function(a){c(a)})})},statsOption=function(a){return new Promise(function(b,c){var d=[],e=0,f=0;linksToValidate(a).then(function(a){d=a.map(function(a){return a.href}),e=d.length,f=_toConsumableArray(new Set(d)).length;// con los tres puntos colocamos dentro del array la cantidad de links únicos
// console.log(chalk.cyan.bold('Links Totales:'), totalLinks, arrLinks)
var c={Total:e,Unique:f};b(c)})["catch"](function(a){c(a)})})},statsBroken=function(a){return new Promise(function(b,c){var d=0;linksToValidate(a).then(function(a){var c=a.filter(function(a){var b=a.validate;return"OK"!==b});d=c.length;// console.log(chalk.cyan.bold('Links Totales:'), totalLinks, arrLinks)
var e={Broken:d};b(e)})["catch"](function(a){c(a)})})},statsAndValidate2=function(a){return new Promise(function(b,c){Promise.all([statsOption(a),statsBroken(a)]).then(function(a){var c={Total:a[0].Total,Unique:a[0].Unique,Broken:a[1].Broken};b(c)})["catch"](function(a){c(a)})})},validate=!1,stats=!1,mdLinks=function(a,b,c){return new Promise(function(d,e){"--validate"===b&&"--stats"===c||"--stats"===b&&"--validate"===c?(validate=!0,stats=!0,d(statsAndValidate(a))):"--validate"===b&&c===void 0?(validate=!0,d(linksToValidate(a))):"--stats"===b&&c===void 0?(stats=!0,d(statsOption(a))):d(isDirOrFile(a)),e(err)})};// mdLinks('prueba', '--stats', '--validate')
//   .then((resolve) => console.log(resolve))
//   .catch((err) => console.log(err));
module.exports=mdLinks;